Adaptive membership query (AMQ) data structures, also known as filters, speed up dictionary accesses by filtering out unnecessary queries.  They manage this by compactly representing set information at the expense of correctness.  Because they are compact, AMQs can be placed higher in the memory hierarchy than the sets they represent, allowing faster accesses.  But because they are not always correct, AMQs cannot filter all unnecessary queries.  An AMQ is useful insofar as it filters out unnecessary queries at an acceptable rate and is small and fast enough to respond to queries quickly.

Classical AMQs offer a tunable false positive rate ε which applies to any randomly picked query.  But faulty queries, i.e., queries that generate false positives, are not fixed: if a classical AMQ reports a false positive for an element x, subsequent queries on x will continue to yield false positives.  Given data on a Zipfian distribution or a basic adversary, classical AMQs are liable to have high false positive rates, reducing their usefulness.  Adaptive AMQs, in contrast, guarantee a false positive rate of ε for any query, even those that previously prompted false positives, by storing extra information to adapt to past false positives.  Adaptive AMQs are well suited for Zipfian and adversarial distributions, as they can fix the repeated false positives that trouble classical filters.  But they must store adaptivity information compactly to stay small and fast.

With Profs. Shikha Singh, Sam McCauley, and a fellow undergraduate, I developed a novel adaptive variant of the quotient filter.  I wrote an implementation of the performant Rank-and-Select quotient filter (RSQF)  from scratch in C, and then augmented it with a compressed representation for storing adaptivity information.  My group is currently testing our filter against other state-of-the-art adaptive filters; our filter appears to do well on adversarial queries and queries drawn from Zipfian distributions (generated using Sandia National Labs' FireHose streaming benchmarks).